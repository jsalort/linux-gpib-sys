/* automatically generated by rust-bindgen 0.71.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const __GLIBC_USE_C2X_STRTOL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 39;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const _BITS_STDINT_LEAST_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __BITS_PER_LONG: u32 = 64;
pub const GPIB_MAX_NUM_BOARDS: u32 = 16;
pub const GPIB_MAX_NUM_DESCRIPTORS: u32 = 4096;
pub const GPIB_MAJOR_VERSION: u32 = 4;
pub const GPIB_MINOR_VERSION: u32 = 3;
pub const GPIB_MICRO_VERSION: u32 = 7;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __s8 = ::std::os::raw::c_schar;
pub type __u8 = ::std::os::raw::c_uchar;
pub type __s16 = ::std::os::raw::c_short;
pub type __u16 = ::std::os::raw::c_ushort;
pub type __s32 = ::std::os::raw::c_int;
pub type __u32 = ::std::os::raw::c_uint;
pub type __s64 = ::std::os::raw::c_longlong;
pub type __u64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
pub type __s128 = i128;
pub type __u128 = u128;
pub type __le16 = __u16;
pub type __be16 = __u16;
pub type __le32 = __u32;
pub type __be32 = __u32;
pub type __le64 = __u64;
pub type __be64 = __u64;
pub type __sum16 = __u16;
pub type __wsum = __u32;
pub type __poll_t = ::std::os::raw::c_uint;
pub const ibsta_bit_numbers_DCAS_NUM: ibsta_bit_numbers = 0;
pub const ibsta_bit_numbers_DTAS_NUM: ibsta_bit_numbers = 1;
pub const ibsta_bit_numbers_LACS_NUM: ibsta_bit_numbers = 2;
pub const ibsta_bit_numbers_TACS_NUM: ibsta_bit_numbers = 3;
pub const ibsta_bit_numbers_ATN_NUM: ibsta_bit_numbers = 4;
pub const ibsta_bit_numbers_CIC_NUM: ibsta_bit_numbers = 5;
pub const ibsta_bit_numbers_REM_NUM: ibsta_bit_numbers = 6;
pub const ibsta_bit_numbers_LOK_NUM: ibsta_bit_numbers = 7;
pub const ibsta_bit_numbers_CMPL_NUM: ibsta_bit_numbers = 8;
pub const ibsta_bit_numbers_EVENT_NUM: ibsta_bit_numbers = 9;
pub const ibsta_bit_numbers_SPOLL_NUM: ibsta_bit_numbers = 10;
pub const ibsta_bit_numbers_RQS_NUM: ibsta_bit_numbers = 11;
pub const ibsta_bit_numbers_SRQI_NUM: ibsta_bit_numbers = 12;
pub const ibsta_bit_numbers_END_NUM: ibsta_bit_numbers = 13;
pub const ibsta_bit_numbers_TIMO_NUM: ibsta_bit_numbers = 14;
pub const ibsta_bit_numbers_ERR_NUM: ibsta_bit_numbers = 15;
pub type ibsta_bit_numbers = ::std::os::raw::c_uint;
pub const ibsta_bits_DCAS: ibsta_bits = 1;
pub const ibsta_bits_DTAS: ibsta_bits = 2;
pub const ibsta_bits_LACS: ibsta_bits = 4;
pub const ibsta_bits_TACS: ibsta_bits = 8;
pub const ibsta_bits_ATN: ibsta_bits = 16;
pub const ibsta_bits_CIC: ibsta_bits = 32;
pub const ibsta_bits_REM: ibsta_bits = 64;
pub const ibsta_bits_LOK: ibsta_bits = 128;
pub const ibsta_bits_CMPL: ibsta_bits = 256;
pub const ibsta_bits_EVENT: ibsta_bits = 512;
pub const ibsta_bits_SPOLL: ibsta_bits = 1024;
pub const ibsta_bits_RQS: ibsta_bits = 2048;
pub const ibsta_bits_SRQI: ibsta_bits = 4096;
pub const ibsta_bits_END: ibsta_bits = 8192;
pub const ibsta_bits_TIMO: ibsta_bits = 16384;
pub const ibsta_bits_ERR: ibsta_bits = 32768;
pub const ibsta_bits_device_status_mask: ibsta_bits = 59648;
pub const ibsta_bits_board_status_mask: ibsta_bits = 63487;
pub type ibsta_bits = ::std::os::raw::c_uint;
pub const eos_flags_EOS_MASK: eos_flags = 7168;
pub const eos_flags_REOS: eos_flags = 1024;
pub const eos_flags_XEOS: eos_flags = 2048;
pub const eos_flags_BIN: eos_flags = 4096;
pub type eos_flags = ::std::os::raw::c_uint;
pub const bus_control_line_VALID_DAV: bus_control_line = 1;
pub const bus_control_line_VALID_NDAC: bus_control_line = 2;
pub const bus_control_line_VALID_NRFD: bus_control_line = 4;
pub const bus_control_line_VALID_IFC: bus_control_line = 8;
pub const bus_control_line_VALID_REN: bus_control_line = 16;
pub const bus_control_line_VALID_SRQ: bus_control_line = 32;
pub const bus_control_line_VALID_ATN: bus_control_line = 64;
pub const bus_control_line_VALID_EOI: bus_control_line = 128;
pub const bus_control_line_VALID_ALL: bus_control_line = 255;
pub const bus_control_line_BUS_DAV: bus_control_line = 256;
pub const bus_control_line_BUS_NDAC: bus_control_line = 512;
pub const bus_control_line_BUS_NRFD: bus_control_line = 1024;
pub const bus_control_line_BUS_IFC: bus_control_line = 2048;
pub const bus_control_line_BUS_REN: bus_control_line = 4096;
pub const bus_control_line_BUS_SRQ: bus_control_line = 8192;
pub const bus_control_line_BUS_ATN: bus_control_line = 16384;
pub const bus_control_line_BUS_EOI: bus_control_line = 32768;
pub type bus_control_line = ::std::os::raw::c_uint;
pub const cmd_byte_GTL: cmd_byte = 1;
pub const cmd_byte_SDC: cmd_byte = 4;
pub const cmd_byte_PP_CONFIG: cmd_byte = 5;
pub const cmd_byte_PPC: cmd_byte = 5;
pub const cmd_byte_GET: cmd_byte = 8;
pub const cmd_byte_TCT: cmd_byte = 9;
pub const cmd_byte_LLO: cmd_byte = 17;
pub const cmd_byte_DCL: cmd_byte = 20;
pub const cmd_byte_PPU: cmd_byte = 21;
pub const cmd_byte_SPE: cmd_byte = 24;
pub const cmd_byte_SPD: cmd_byte = 25;
pub const cmd_byte_CFE: cmd_byte = 31;
pub const cmd_byte_LAD: cmd_byte = 32;
pub const cmd_byte_UNL: cmd_byte = 63;
pub const cmd_byte_TAD: cmd_byte = 64;
pub const cmd_byte_UNT: cmd_byte = 95;
pub const cmd_byte_SAD: cmd_byte = 96;
pub const cmd_byte_PPE: cmd_byte = 96;
pub const cmd_byte_PPD: cmd_byte = 112;
pub type cmd_byte = ::std::os::raw::c_uint;
pub const ppe_bits_PPC_DISABLE: ppe_bits = 16;
pub const ppe_bits_PPC_SENSE: ppe_bits = 8;
pub const ppe_bits_PPC_DIO_MASK: ppe_bits = 7;
pub type ppe_bits = ::std::os::raw::c_uint;
pub const gpib_command_mask: _bindgen_ty_1 = 127;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
pub const ibask_option_IBA_PAD: ibask_option = 1;
pub const ibask_option_IBA_SAD: ibask_option = 2;
pub const ibask_option_IBA_TMO: ibask_option = 3;
pub const ibask_option_IBA_EOT: ibask_option = 4;
pub const ibask_option_IBA_PPC: ibask_option = 5;
pub const ibask_option_IBA_READ_DR: ibask_option = 6;
pub const ibask_option_IBA_AUTOPOLL: ibask_option = 7;
pub const ibask_option_IBA_CICPROT: ibask_option = 8;
pub const ibask_option_IBA_IRQ: ibask_option = 9;
pub const ibask_option_IBA_SC: ibask_option = 10;
pub const ibask_option_IBA_SRE: ibask_option = 11;
pub const ibask_option_IBA_EOS_RD: ibask_option = 12;
pub const ibask_option_IBA_EOS_WRT: ibask_option = 13;
pub const ibask_option_IBA_EOS_CMP: ibask_option = 14;
pub const ibask_option_IBA_EOS_CHAR: ibask_option = 15;
pub const ibask_option_IBA_PP2: ibask_option = 16;
pub const ibask_option_IBA_TIMING: ibask_option = 17;
pub const ibask_option_IBA_DMA: ibask_option = 18;
pub const ibask_option_IBA_READ_ADJUST: ibask_option = 19;
pub const ibask_option_IBA_WRITE_ADJUST: ibask_option = 20;
pub const ibask_option_IBA_EVENT_QUEUE: ibask_option = 21;
pub const ibask_option_IBA_SPOLL_BIT: ibask_option = 22;
pub const ibask_option_IBA_SEND_LLO: ibask_option = 23;
pub const ibask_option_IBA_SPOLL_TIME: ibask_option = 24;
pub const ibask_option_IBA_PPOLL_TIME: ibask_option = 25;
pub const ibask_option_IBA_END_BIT_IS_NORMAL: ibask_option = 26;
pub const ibask_option_IBA_UN_ADDR: ibask_option = 27;
pub const ibask_option_IBA_HS_CABLE_LENGTH: ibask_option = 31;
pub const ibask_option_IBA_IST: ibask_option = 32;
pub const ibask_option_IBA_RSV: ibask_option = 33;
pub const ibask_option_IBA_BNA: ibask_option = 512;
pub const ibask_option_IBA_7BitEOS: ibask_option = 4096;
pub type ibask_option = ::std::os::raw::c_uint;
pub const ibconfig_option_IBC_PAD: ibconfig_option = 1;
pub const ibconfig_option_IBC_SAD: ibconfig_option = 2;
pub const ibconfig_option_IBC_TMO: ibconfig_option = 3;
pub const ibconfig_option_IBC_EOT: ibconfig_option = 4;
pub const ibconfig_option_IBC_PPC: ibconfig_option = 5;
pub const ibconfig_option_IBC_READDR: ibconfig_option = 6;
pub const ibconfig_option_IBC_AUTOPOLL: ibconfig_option = 7;
pub const ibconfig_option_IBC_CICPROT: ibconfig_option = 8;
pub const ibconfig_option_IBC_IRQ: ibconfig_option = 9;
pub const ibconfig_option_IBC_SC: ibconfig_option = 10;
pub const ibconfig_option_IBC_SRE: ibconfig_option = 11;
pub const ibconfig_option_IBC_EOS_RD: ibconfig_option = 12;
pub const ibconfig_option_IBC_EOS_WRT: ibconfig_option = 13;
pub const ibconfig_option_IBC_EOS_CMP: ibconfig_option = 14;
pub const ibconfig_option_IBC_EOS_CHAR: ibconfig_option = 15;
pub const ibconfig_option_IBC_PP2: ibconfig_option = 16;
pub const ibconfig_option_IBC_TIMING: ibconfig_option = 17;
pub const ibconfig_option_IBC_DMA: ibconfig_option = 18;
pub const ibconfig_option_IBC_READ_ADJUST: ibconfig_option = 19;
pub const ibconfig_option_IBC_WRITE_ADJUST: ibconfig_option = 20;
pub const ibconfig_option_IBC_EVENT_QUEUE: ibconfig_option = 21;
pub const ibconfig_option_IBC_SPOLL_BIT: ibconfig_option = 22;
pub const ibconfig_option_IBC_SEND_LLO: ibconfig_option = 23;
pub const ibconfig_option_IBC_SPOLL_TIME: ibconfig_option = 24;
pub const ibconfig_option_IBC_PPOLL_TIME: ibconfig_option = 25;
pub const ibconfig_option_IBC_END_BIT_IS_NORMAL: ibconfig_option = 26;
pub const ibconfig_option_IBC_UN_ADDR: ibconfig_option = 27;
pub const ibconfig_option_IBC_HS_CABLE_LENGTH: ibconfig_option = 31;
pub const ibconfig_option_IBC_IST: ibconfig_option = 32;
pub const ibconfig_option_IBC_RSV: ibconfig_option = 33;
pub const ibconfig_option_IBC_BNA: ibconfig_option = 512;
pub type ibconfig_option = ::std::os::raw::c_uint;
pub const t1_delays_T1_DELAY_2000ns: t1_delays = 1;
pub const t1_delays_T1_DELAY_500ns: t1_delays = 2;
pub const t1_delays_T1_DELAY_350ns: t1_delays = 3;
pub type t1_delays = ::std::os::raw::c_uint;
pub const request_service_bit: _bindgen_ty_2 = 64;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
pub const gpib_events_EVENT_NONE: gpib_events = 0;
pub const gpib_events_EVENT_DEV_TRG: gpib_events = 1;
pub const gpib_events_EVENT_DEV_CLR: gpib_events = 2;
pub const gpib_events_EVENT_IFC: gpib_events = 3;
pub type gpib_events = ::std::os::raw::c_uint;
pub const gpib_stb_IB_STB_RQS: gpib_stb = 64;
pub const gpib_stb_IB_STB_ESB: gpib_stb = 32;
pub const gpib_stb_IB_STB_MAV: gpib_stb = 16;
pub type gpib_stb = ::std::os::raw::c_uint;
pub const iberr_code_EDVR: iberr_code = 0;
pub const iberr_code_ECIC: iberr_code = 1;
pub const iberr_code_ENOL: iberr_code = 2;
pub const iberr_code_EADR: iberr_code = 3;
pub const iberr_code_EARG: iberr_code = 4;
pub const iberr_code_ESAC: iberr_code = 5;
pub const iberr_code_EABO: iberr_code = 6;
pub const iberr_code_ENEB: iberr_code = 7;
pub const iberr_code_EDMA: iberr_code = 8;
pub const iberr_code_EOIP: iberr_code = 10;
pub const iberr_code_ECAP: iberr_code = 11;
pub const iberr_code_EFSO: iberr_code = 12;
pub const iberr_code_EBUS: iberr_code = 14;
pub const iberr_code_ESTB: iberr_code = 15;
pub const iberr_code_ESRQ: iberr_code = 16;
pub const iberr_code_ECNF: iberr_code = 17;
pub const iberr_code_ETAB: iberr_code = 20;
pub type iberr_code = ::std::os::raw::c_uint;
pub const gpib_timeout_TNONE: gpib_timeout = 0;
pub const gpib_timeout_T10us: gpib_timeout = 1;
pub const gpib_timeout_T30us: gpib_timeout = 2;
pub const gpib_timeout_T100us: gpib_timeout = 3;
pub const gpib_timeout_T300us: gpib_timeout = 4;
pub const gpib_timeout_T1ms: gpib_timeout = 5;
pub const gpib_timeout_T3ms: gpib_timeout = 6;
pub const gpib_timeout_T10ms: gpib_timeout = 7;
pub const gpib_timeout_T30ms: gpib_timeout = 8;
pub const gpib_timeout_T100ms: gpib_timeout = 9;
pub const gpib_timeout_T300ms: gpib_timeout = 10;
pub const gpib_timeout_T1s: gpib_timeout = 11;
pub const gpib_timeout_T3s: gpib_timeout = 12;
pub const gpib_timeout_T10s: gpib_timeout = 13;
pub const gpib_timeout_T30s: gpib_timeout = 14;
pub const gpib_timeout_T100s: gpib_timeout = 15;
pub const gpib_timeout_T300s: gpib_timeout = 16;
pub const gpib_timeout_T1000s: gpib_timeout = 17;
pub type gpib_timeout = ::std::os::raw::c_uint;
pub const gpib_addr_max: ::std::os::raw::c_int = 30;
pub const gpib_sad_max: ::std::os::raw::c_int = 31;
pub type Addr4882_t = u16;
pub const NOADDR: Addr4882_t = 65535;
pub const STOPend: ::std::os::raw::c_int = 256;
pub const sad_special_address_NO_SAD: sad_special_address = 0;
pub const sad_special_address_ALL_SAD: sad_special_address = -1;
pub type sad_special_address = ::std::os::raw::c_int;
pub const send_eotmode_NULLend: send_eotmode = 0;
pub const send_eotmode_DABend: send_eotmode = 1;
pub const send_eotmode_NLend: send_eotmode = 2;
pub type send_eotmode = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub static mut ibsta: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut ibcnt: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut iberr: ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub static mut ibcntl: ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AllSPoll(
        board_desc: ::std::os::raw::c_int,
        addressList: *const Addr4882_t,
        resultList: *mut ::std::os::raw::c_short,
    );
}
unsafe extern "C" {
    pub fn AllSpoll(
        board_desc: ::std::os::raw::c_int,
        addressList: *const Addr4882_t,
        resultList: *mut ::std::os::raw::c_short,
    );
}
unsafe extern "C" {
    pub fn DevClear(board_desc: ::std::os::raw::c_int, address: Addr4882_t);
}
unsafe extern "C" {
    pub fn DevClearList(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn EnableLocal(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn EnableRemote(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn FindLstn(
        board_desc: ::std::os::raw::c_int,
        padList: *const Addr4882_t,
        resultList: *mut Addr4882_t,
        maxNumResults: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn FindRQS(
        board_desc: ::std::os::raw::c_int,
        addressList: *const Addr4882_t,
        result: *mut ::std::os::raw::c_short,
    );
}
unsafe extern "C" {
    pub fn PassControl(board_desc: ::std::os::raw::c_int, address: Addr4882_t);
}
unsafe extern "C" {
    pub fn PPoll(board_desc: ::std::os::raw::c_int, result: *mut ::std::os::raw::c_short);
}
unsafe extern "C" {
    pub fn PPollConfig(
        board_desc: ::std::os::raw::c_int,
        address: Addr4882_t,
        dataLine: ::std::os::raw::c_int,
        lineSense: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn PPollUnconfig(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn RcvRespMsg(
        board_desc: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        termination: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ReadStatusByte(
        board_desc: ::std::os::raw::c_int,
        address: Addr4882_t,
        result: *mut ::std::os::raw::c_short,
    );
}
unsafe extern "C" {
    pub fn Receive(
        board_desc: ::std::os::raw::c_int,
        address: Addr4882_t,
        buffer: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        termination: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn ReceiveSetup(board_desc: ::std::os::raw::c_int, address: Addr4882_t);
}
unsafe extern "C" {
    pub fn ResetSys(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn Send(
        board_desc: ::std::os::raw::c_int,
        address: Addr4882_t,
        buffer: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        eot_mode: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn SendCmds(
        board_desc: ::std::os::raw::c_int,
        cmds: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    );
}
unsafe extern "C" {
    pub fn SendDataBytes(
        board_desc: ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        eotmode: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn SendIFC(board_desc: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn SendLLO(board_desc: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn SendList(
        board_desc: ::std::os::raw::c_int,
        addressList: *const Addr4882_t,
        buffer: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
        eotmode: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn SendSetup(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn SetRWLS(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn TestSRQ(board_desc: ::std::os::raw::c_int, result: *mut ::std::os::raw::c_short);
}
unsafe extern "C" {
    pub fn TestSys(
        board_desc: ::std::os::raw::c_int,
        addressList: *const Addr4882_t,
        resultList: *mut ::std::os::raw::c_short,
    );
}
unsafe extern "C" {
    pub fn ThreadIbsta() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ThreadIberr() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ThreadIbcnt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ThreadIbcntl() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn AsyncIbsta() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AsyncIberr() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AsyncIbcnt() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AsyncIbcntl() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn Trigger(board_desc: ::std::os::raw::c_int, address: Addr4882_t);
}
unsafe extern "C" {
    pub fn TriggerList(board_desc: ::std::os::raw::c_int, addressList: *const Addr4882_t);
}
unsafe extern "C" {
    pub fn WaitSRQ(board_desc: ::std::os::raw::c_int, result: *mut ::std::os::raw::c_short);
}
unsafe extern "C" {
    pub fn ibask(
        ud: ::std::os::raw::c_int,
        option: ::std::os::raw::c_int,
        value: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibbna(
        ud: ::std::os::raw::c_int,
        board_name: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibcac(
        ud: ::std::os::raw::c_int,
        synchronous: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibclr(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibcmd(
        ud: ::std::os::raw::c_int,
        cmd: *const ::std::os::raw::c_void,
        cnt: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibcmda(
        ud: ::std::os::raw::c_int,
        cmd: *const ::std::os::raw::c_void,
        cnt: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibconfig(
        ud: ::std::os::raw::c_int,
        option: ::std::os::raw::c_int,
        value: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibdev(
        board_index: ::std::os::raw::c_int,
        pad: ::std::os::raw::c_int,
        sad: ::std::os::raw::c_int,
        timo: ::std::os::raw::c_int,
        send_eoi: ::std::os::raw::c_int,
        eosmode: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibdma(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibeot(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibeos(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibevent(
        ud: ::std::os::raw::c_int,
        event: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibfind(dev: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibgts(
        ud: ::std::os::raw::c_int,
        shadow_handshake: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibist(ud: ::std::os::raw::c_int, ist: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn iblines(
        ud: ::std::os::raw::c_int,
        line_status: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibln(
        ud: ::std::os::raw::c_int,
        pad: ::std::os::raw::c_int,
        sad: ::std::os::raw::c_int,
        found_listener: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibloc(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibonl(ud: ::std::os::raw::c_int, onl: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibpad(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibpct(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibppc(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrd(
        ud: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrda(
        ud: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrdf(
        ud: ::std::os::raw::c_int,
        file_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrpp(
        ud: ::std::os::raw::c_int,
        ppr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrsc(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrsp(
        ud: ::std::os::raw::c_int,
        spr: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrsv(
        ud: ::std::os::raw::c_int,
        status_byte: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibrsv2(
        ud: ::std::os::raw::c_int,
        status_byte: ::std::os::raw::c_int,
        new_reason_for_service: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibsad(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibsic(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibspb(
        ud: ::std::os::raw::c_int,
        sp_bytes: *mut ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibsre(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibstop(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibtmo(ud: ::std::os::raw::c_int, v: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibtrg(ud: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibvers(version: *mut *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn ibwait(ud: ::std::os::raw::c_int, mask: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibwrt(
        ud: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibwrta(
        ud: ::std::os::raw::c_int,
        buf: *const ::std::os::raw::c_void,
        count: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ibwrtf(
        ud: ::std::os::raw::c_int,
        file_path: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn gpib_error_string(iberr: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
